#!/bin/sh

# git-clone-related:  clones a repository that is related to this one.
# Sometimes, two repositories are related:  you need clones of both of them.
# Given a clone of one (possibly in a fork and/or on a branch), this clones
# the other, attempting to find a matching fork and branch.
# This also works in an Azure Pipelines, CircleCI, or Travis CI job.

# Usage:  git-clone-related UPSTREAM_ORG REPO_NAME [DESTINATION]
#   UPSTREAM_ORG is, if this is a fork, the parent organization.
#   REPO_NAME is the repository name without the organization.
#   DESTINATION is the new clone (not its parent), by default ../REPO .
# When invoked from within a clone of MYORG/MYREPO , at branch MYBRANCH,
# it first chooses a fork, which is the first of these that exists:
#   https://github.com/${ORG}/${REPO_NAME}.git
#   https://github.com/${UPSTREAM_ORG}/${REPO_NAME}.git
# Then, it chooses a branch: MYBRANCH if it exists, or "master" otherwise.

# Fail if any command fails.
set +e

if [ "$#" -lt 2 || "$#" -gt 3 ]; then
  echo "Usage: $0 UPSTREAM_ORG REPO [DESTINATION]" >&2
  exit 1
fi

UPSTREAM_ORG=$1
REPO_NAME=$2
if [ "$#" -eq 3 ]; then
  DESTINATION=$3
else
  DESTINATION=../${REPO_NAME}
fi

SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")

eval `${SCRIPTPATH}/ci-info ${UPSTREAM_ORG}`
REPO_URL=`${SCRIPTPATH}/git-find-fork ${CI_ORGANIZATION} ${UPSTREAM_ORG} ${REPO_NAME}`
BRANCH=`${SCRIPTPATH}/git-find-branch ${REPO_URL} ${CI_BRANCH}`
# Try twice in case of network lossage.
echo "git clone -b ${BRANCH} --single-branch --depth 1 -q ${REPO_URL} ${DESTINATION}"
git clone -b ${BRANCH} --single-branch --depth 1 -q ${REPO_URL} ${DESTINATION} \
  || git clone -b ${BRANCH} --single-branch --depth 1 -q ${REPO_URL} ${DESTINATION}
