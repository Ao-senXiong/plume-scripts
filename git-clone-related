#!/bin/sh

# git-clone-related:  clones a repository that is related to this one,
#   or pulls it if it has already been cloned.
#
# Sometimes, two repositories are related:  you need clones of both of them.
# Given a clone of one (possibly in a fork and/or on a branch), this clones
# the other, attempting to find a matching fork and branch.
# This also works in an Azure Pipelines, CircleCI, or Travis CI job.
#
# Usage:  git-clone-related UPSTREAM_ORG REPO_NAME [DESTINATION] [GIT_ARGS...]
#   UPSTREAM_ORG is, if this is a fork, the parent organization.
#   REPO_NAME is the repository name without the organization.
#   DESTINATION is the new clone (not its parent), by default ../REPO .
#     If it exists, it is updated via "git pull", without changing its fork
#     or branch.  No error is issued if the pull fails.
#   GIT_ARGS is extra arguments to git clone.  It defaults to
#     "-q --single-branch --depth 1" (without the quotes).
#
# When invoked from within a clone of MYORG/MYREPO , at branch MYBRANCH,
# this script first chooses a fork, which is the first of these that exists:
#   https://github.com/${ORG}/${REPO_NAME}.git
#   https://github.com/${UPSTREAM_ORG}/${REPO_NAME}.git
# Then, it chooses a branch: MYBRANCH if it exists, or "master" otherwise.

# Fail if any command fails.
set +e

if [ "$#" -lt 2 ]; then
  echo "Usage: $0 UPSTREAM_ORG REPO [DESTINATION] [GIT_ARGS...]" >&2
  exit 1
fi

UPSTREAM_ORG=$1; shift
REPO_NAME=$1; shift
if [ "$#" -ne 0 ]; then
  DESTINATION=$1; shift
else
  DESTINATION=../${REPO_NAME}
fi
if [ "$#" -ne 0 ]; then
  GIT_ARGS="$@"
else
  GIT_ARGS="-q --single-branch --depth 1"
fi

if [ -d ${DESTINATION} ]; then
  echo "(cd ${DESTINATION} && git pull -q)"
  # Older versions of git don't support the -C command-line option.
  # In a Travis pull request, a repository can be in state "(HEAD detached at b475d58d)"
  # and "git pull" fails.
  (cd ${DESTINATION} && (git pull -q || (git branch && true)))
else
  SCRIPTDIR="$(cd "$(dirname "$0")" && pwd -P)"

  eval `${SCRIPTDIR}/ci-info ${UPSTREAM_ORG}`
  REPO_URL=`${SCRIPTDIR}/git-find-fork ${CI_ORGANIZATION} ${UPSTREAM_ORG} ${REPO_NAME}`
  BRANCH=`${SCRIPTDIR}/git-find-branch ${REPO_URL} ${CI_BRANCH}`
  echo "git clone -b ${BRANCH} ${GIT_ARGS} ${REPO_URL} ${DESTINATION} $@"
  # Try twice in case of network lossage.
  git clone -b ${BRANCH} ${GIT_ARGS} ${REPO_URL} ${DESTINATION} "$@" \
    || git clone -b ${BRANCH} ${GIT_ARGS} ${REPO_URL} ${DESTINATION} "$@"
fi
