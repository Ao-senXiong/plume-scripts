#!/bin/sh

# Given a file of warnings, reports only those that are in the diff for the
# current pull request.  Works for Azure Pipelines, CircleCI, and Travis CI.
# Exit status is non-zero if any warnings are output.

# Example use:
#
# git -C /tmp/plume-scripts pull > /dev/null 2>&1 \
#   || git -C /tmp clone --depth 1 -q https://github.com/plume-lib/plume-scripts.git
# (command-that-issues-warnings > /tmp/warnings.txt 2>&1) || true
# /tmp/plume-scripts/ci-lint-diff /tmp/warnings.txt
#
# If you get a warning that /tmp/diff is empty, that might be because your
# clone is shallow and does not contain all the commits.  You can fix that
# by pulling upstream.  Or it might be because your branch is identical to
# the base/upstream branch.

if [ "$#" -ne 1 ] ; then
  echo "Usage: $0 WARNINGS-FILE" >&2
  exit 2
fi
if ! [ -f "$1" ] ; then
  echo "File $1 does not exist" >&2
  exit 2
fi
WARNINGSFILE=$1

set -e

SCRIPTDIR="$( cd "$(dirname "$0")" ; pwd -P )"

eval `${SCRIPTDIR}/ci-info`

# Make the branches mentioned in $CI_COMMIT_RANGE available.
if ! git cat-file -e $CI_COMMIT_RANGE_START^{commit}; then
  if ! git show-ref --verify --quiet refs/heads/$CI_COMMIT_RANGE_START > /dev/null 2>&1; then
    echo git branch --track $CI_COMMIT_RANGE_START origin/$CI_COMMIT_RANGE_START
    git branch --track $CI_COMMIT_RANGE_START origin/$CI_COMMIT_RANGE_START
  fi
fi
if ! git cat-file -e $CI_COMMIT_RANGE_END^{commit}; then
  if ! git show-ref --verify --quiet refs/heads/$CI_COMMIT_RANGE_END > /dev/null 2>&1; then
    echo git branch --track $CI_COMMIT_RANGE_END origin/$CI_COMMIT_RANGE_END
    git branch --track $CI_COMMIT_RANGE_END origin/$CI_COMMIT_RANGE_END
  fi
fi

set +e
rm -rf /tmp/diff.txt
git --no-pager diff --exit-code $CI_COMMIT_RANGE > /tmp/diff.txt 2>&1
git_status=$?
if [ $git_status -gt 1 ] ; then
  echo "git diff exited with status $git_status"
  cat /tmp/diff.txt
  git --no-pager diff --exit-code $CI_COMMIT_RANGE
  git --no-pager branch -a
  git --no-pager diff $CI_COMMIT_RANGE
  exit 2
fi
set -e
if [ ! -r /tmp/diff.txt ] ; then
  echo "/tmp/diff.txt does not exist"
  exit 2
fi
if [ ! -s /tmp/diff.txt ] ; then
  echo
  echo "*****"
  echo "ERROR: /tmp/diff.txt is empty for $CI_COMMIT_RANGE ."
  echo "Try pulling base branch (often master) into compare branch (often your feature branch)."
  echo "This command will print diagnostic information, then exit."
  echo
  echo git rev-parse $CI_COMMIT_RANGE_START
  git rev-parse $CI_COMMIT_RANGE_START
  echo git rev-parse $CI_COMMIT_RANGE_END
  git rev-parse $CI_COMMIT_RANGE_END
  echo git rev-parse remotes/origin/$CI_COMMIT_RANGE_START
  git rev-parse remotes/origin/$CI_COMMIT_RANGE_START
  echo git rev-parse remotes/origin/$CI_COMMIT_RANGE_END
  git rev-parse remotes/origin/$CI_COMMIT_RANGE_END
  echo
  echo "Branches:"
  git --no-pager branch -a
  echo
  echo "git remote show origin"
  git remote show origin
  echo
  echo "Re-execution of diff command:"
  echo git --no-pager diff --exit-code $CI_COMMIT_RANGE
  git --no-pager diff --exit-code $CI_COMMIT_RANGE
  echo
  echo "Second re-execution of diff command:"
  echo "git --no-pager diff --exit-code $CI_COMMIT_RANGE > /tmp/tmp.tmp && cat /tmp/tmp.tmp"
  git --no-pager diff --exit-code $CI_COMMIT_RANGE > /tmp/tmp.tmp && cat /tmp/tmp.tmp
  echo
  echo "Endpoints of commit range ($CI_COMMIT_RANGE_START and $CI_COMMIT_RANGE_END):"
  git --no-pager show $CI_COMMIT_RANGE_START
  git --no-pager show $CI_COMMIT_RANGE_END
  echo
  echo "Current directory:"
  pwd
  echo
  echo "Contents of /tmp:"
  ls -l /tmp/
  exit 2
fi

python ${SCRIPTDIR}/lint-diff.py --guess-strip /tmp/diff.txt $WARNINGSFILE
