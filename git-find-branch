#!/bin/sh

# Usage:  git-find-branch REPO BRANCH ...
# Prints either the first BRANCH that exists in REPO,
# or else prints "master" if none of the branches exists.

# For example usage within a Travis build, see
# https://github.com/plume-lib/plume-scripts#usage-of-git-find-forkbranch

if [ "$#" -eq 1 ]; then
    script=$(basename -- "$0")
    >&2 echo "Warning: $script requires at least 2 arguments, got $#"
    >&2 echo "Usage: $script REPO BRANCH ..."
    >&2 echo "Returning \"master\""
    echo "master"
    exit 0
fi

REPO=$1
shift
for BRANCH in "$@"; do
    if (git ls-remote --quiet --exit-code --heads ${REPO} ${BRANCH} > /dev/null) ; then
        echo ${BRANCH}
	exit 0
    fi
done

echo "master"
